count(`Road Category`) %>%
mutate(percentage = n / sum(n) * 100) %>%
ggplot(aes(
area = n,
label = paste0(`Road Category`, "\n(", round(percentage, 1), "%)"),
fill = `Road Category`)
) +
geom_treemap() +
geom_treemap_text(color = "white", place = "centre", grow = TRUE, reflow = TRUE) +
scale_fill_manual(values = rep(colors, length.out = length(unique(df$`Road Category`)))) +
labs(
title = "Accidents by Road Type (Treemap)",
fill = "Road Type"
),
"15_cond_road_type_treemap.jpg",
subtitle = "Relative share of accidents by road type"
)
# 16. Injury Severity Distribution
# Dot plot showing the count of accidents for each injury severity level.
save_plot(
df %>% count(`Injury Severity`) %>%
ggplot(aes(x = n, y = fct_reorder(`Injury Severity`, n), color = `Injury Severity`)) + # Reorder and color by severity
geom_segment(aes(xend = 0, yend = fct_reorder(`Injury Severity`, n)), size = 1.2) +
geom_point(size = 5) +
geom_text(aes(label = scales::comma(n)), vjust = -1.2, color = "gray30", size = 5.5) +
scale_color_manual(values = injury_colors) + # Use predefined injury colors
labs(title = "Injury Severity Distribution", x = "Count", y = "Severity", color = "Injury Severity"),
"16_outcomes_severity.jpg",
subtitle = "Severity levels recorded in accident reports"
)
# --- 17a. Severity by Lighting Condition (Final Bubble Plot with Labels) ---
# Bubble plot showing injury severity under surface conditions.
# Bubble size and number label denote incident count.
save_plot(
ggplot(df %>%
filter(!is.na(`Lighting Conditions`), !is.na(`Injury Severity`)) %>%
count(`Lighting Conditions`, `Injury Severity`),
aes(x = fct_infreq(`Lighting Conditions`), y = `Injury Severity`, size = n, color = `Injury Severity`)) +
geom_point(alpha = 0.7) +  # Bubbles
geom_text(aes(label = n), size = 5, color = "gray50", vjust = -3) +  # Labels above bubbles
scale_color_manual(values = injury_colors) +  # Custom color for severity
scale_size_continuous(range = c(5, 25), guide = "none") +  # Bigger bubbles, no size legend
labs(
title = "Severity by Lighting Conditions",
x = "Lighting Conditions",
y = "Injury Severity",
color = "Severity"
) +
theme_minimal(base_family = "Helvetica") +
theme(
axis.text.x = element_text(angle = 30, hjust = 1),
legend.position = "right"
),
"17a_outcomes_bubble_lighting_labeled.jpg",
subtitle = "Bubble size and number label denote number of incidents"
)
# --- 17b. Severity by Surface Condition (Final Bubble Plot with Labels) ---
# Bubble plot showing injury severity under surface conditions.
# Bubble size and number label denote incident count.
save_plot(
ggplot(df %>%
filter(!is.na(`Surface Condition`), !is.na(`Injury Severity`)) %>%
count(`Surface Condition`, `Injury Severity`),
aes(x = fct_infreq(`Surface Condition`), y = `Injury Severity`, size = n, color = `Injury Severity`)) +
geom_point(alpha = 0.7) +  # Bubbles
geom_text(aes(label = n), size = 5, color = "gray50", vjust = -3) +  # Labels above bubbles
scale_color_manual(values = injury_colors) +  # Custom color for severity
scale_size_continuous(range = c(5, 25), guide = "none") +  # Bigger bubbles, no size legend
labs(
title = "Severity by Surface Condition",
x = "Surface Condition",
y = "Injury Severity",
color = "Severity"
) +
theme_minimal(base_family = "Helvetica") +
theme(
axis.text.x = element_text(angle = 30, hjust = 1),
legend.position = "right"
),
"17b_outcomes_bubble_surface_labeled.jpg",
subtitle = "Bubble size and number label denote number of incidents"
)
# 18. Age by Injury Severity (Ridgeline Plot)
# Ridgeline plot showing age distributions for each injury severity level.
save_plot(
df %>% filter(!is.na(Age), !is.na(`Injury Severity`)) %>%
ggplot(aes(x = Age, y = `Injury Severity`, fill = `Injury Severity`)) +
geom_density_ridges(scale = 2, alpha = 0.7, color = "white", size = 0.3) + # Ridgeline density plot
scale_fill_manual(values = injury_colors) + # Use predefined injury colors for fill
labs(title = "Age by Injury Severity", x = "Age", y = "Severity", fill = "Injury Severity"),
"18_outcomes_ridge_age.jpg",
subtitle = "Distribution of injury types across ages"
)
# 19. Severity by Vehicle Category (Stacked Bar Chart)
# Stacked bar chart showing the proportion of different injury severities per vehicle type.
save_plot(
df %>%
filter(!is.na(`Vehicle Category`), !is.na(`Injury Severity`)) %>%
count(`Vehicle Category`, `Injury Severity`) %>%
group_by(`Vehicle Category`) %>%
mutate(prop = n / sum(n)) %>% # Calculate proportion within each vehicle category
ggplot(aes(x = `Vehicle Category`, y = prop, fill = `Injury Severity`)) +
geom_bar(stat = "identity", position = "fill") + # Stacked bar, normalized to 1 (proportion)
scale_fill_manual(values = injury_colors) + # Use predefined injury colors
labs(
title = "Severity by Vehicle Category",
x = "Vehicle Type",
y = "Proportion",
fill = "Injury Severity"
) +
scale_x_discrete( # Wrap long vehicle category labels and angle them
labels = function(x) stringr::str_wrap(x, width = 25),
guide = guide_axis(angle = 45)
),
filename = "19_outcomes_vehicle_severity.jpg",
subtitle = "Proportion of severity per vehicle type"
)
# 20. Equipment Usage
# Dot plot showing the frequency of different safety equipment usage types in accidents.
save_plot(
df %>% count(`Equipment Usage`) %>%
ggplot(aes(x = n, y = fct_reorder(`Equipment Usage`, n))) +
geom_segment(aes(xend = 0, yend = `Equipment Usage`), color = colors[5], size = 1.2) +
geom_point(color = colors[5], size = 5) +
geom_text(aes(label = scales::comma(n)), vjust = -1.2, color = "gray30", size = 5.5) +
labs(title = "Safety Equipment Usage", x = "Count", y = "Usage Type"),
"20_behavior_equipment.jpg",
subtitle = "Frequency of safety equipment usage"
)
# 21. Travel Purpose
# Dot plot showing accident counts by reported reason for travel.
save_plot(
df %>% count(`Travel Reason`) %>%
ggplot(aes(x = n, y = fct_reorder(`Travel Reason`, n))) +
geom_segment(aes(x = 0, xend = n, y = `Travel Reason`, yend = `Travel Reason`),
color = colors[4], size = 1.2) +
geom_point(color = colors[4], size = 5) +
geom_text(aes(label = scales::comma(n)), vjust = -1.2, color = "gray30", size = 5.5) +
labs(title = "Travel Purpose", x = "Count", y = "Reason"),
"21_behavior_travel.jpg",
subtitle = "Reported reason for travel during accident"
)
# 22. Collision Types
# Dot plot showing the distribution of different types of collisions.
save_plot(
df %>%
distinct(Accident_ID, `Type of collision`) %>%
count(`Type of collision`) %>%
ggplot(aes(x = n, y = fct_reorder(`Type of collision`, n))) +
geom_segment(aes(xend = 0, yend = `Type of collision`), color = colors[6], size = 1.2) +
geom_point(color = colors[6], size = 5) +
geom_text(aes(label = scales::comma(n)), vjust = -1.2, color = "gray30", size = 5.5) +
labs(
title = "Collision Types",
x = "Accident Count",
y = "Type"
),
"22_behavior_collision.jpg",
subtitle = "Distribution of collision types"
)
# 23. Vehicles Involved
# Bar chart showing the counts of different vehicle types involved in accidents.
save_plot(
df %>%
distinct(Accident_ID, `Vehicle Category`) %>%
count(`Vehicle Category`) %>%
ggplot(aes(x = n, y = fct_reorder(`Vehicle Category`, n))) +
geom_col(fill = colors[1]) + # Column chart
geom_text(aes(label = scales::comma(n)), hjust = -0.08, color = "gray30", size = 3.5) + # Count labels
labs(title = "Vehicles Involved", x = "Count", y = "Vehicle Type"),
"23_behavior_vehicle.jpg",
subtitle = "Types of vehicles involved in incidents"
)
# 24. Injury Severity by Safety Equipment Usage (Stacked Bar Chart)
# Stacked bar chart showing the proportion of injury levels across different safety equipment usage categories.
save_plot(
df %>%
filter(!is.na(`Injury Severity`), !is.na(`Equipment Usage`)) %>%
count(`Equipment Usage`, `Injury Severity`) %>%
group_by(`Equipment Usage`) %>%
mutate(prop = n / sum(n)) %>% # Calculate proportion within each equipment usage category
ggplot(aes(x = `Equipment Usage`, y = prop, fill = `Injury Severity`)) +
geom_bar(stat = "identity", position = "fill") + # Stacked bar, normalized to 1
scale_fill_manual(values = injury_colors) + # Use predefined injury colors
labs(
title = "Injury Severity by Safety Equipment Usage",
x = "Equipment Usage",
y = "Proportion of Accidents",
fill = "Injury Severity"
),
"24_equipment_vs_severity.jpg",
subtitle = "Proportion of injury levels across usage categories"
)
message("All static plots generated.")
# --- France Road Accidents Dashboard (2009–2012) ---
# --- Setup ---
# Load necessary libraries for data manipulation, visualization, and animation.
library(tidyverse)    # Core tidyverse packages for data manipulation and visualization
library(lubridate)    # For easy manipulation of date-time objects
library(forcats)      # For handling categorical variables (factors)
library(ggthemes)     # Additional ggplot2 themes
library(ggrepel)      # For non-overlapping text labels in ggplot2
library(ggridges)     # For creating ridgeline plots
library(patchwork)    # For combining multiple ggplot2 plots
library(hrbrthemes)   # Another set of ggplot2 themes
library(RColorBrewer) # For color palettes
library(waffle)       # For creating waffle charts
library(treemapify)   # For creating treemaps
library(sf)           # For handling spatial data
library(maptiles)     # For fetching map tiles
library(tidyterra)    # Tidy methods for terra objects (spatial rasters)
library(ggpubr)       # For enhancing ggplot2 publications
# Set working directory. This should be adjusted based on the user's file structure.
setwd("C:/Users/steli/Stelios/Data Science AUEB/Course Material/Trimester 3/Data Visualization/Project 2/FranceRoadAccidents/Data")
# --- France Road Accidents Dashboard (2009–2012) ---
# --- Setup ---
# Load necessary libraries for data manipulation, visualization, and animation.
library(tidyverse)    # Core tidyverse packages for data manipulation and visualization
library(lubridate)    # For easy manipulation of date-time objects
library(forcats)      # For handling categorical variables (factors)
library(ggthemes)     # Additional ggplot2 themes
library(ggrepel)      # For non-overlapping text labels in ggplot2
library(ggridges)     # For creating ridgeline plots
library(patchwork)    # For combining multiple ggplot2 plots
library(hrbrthemes)   # Another set of ggplot2 themes
library(RColorBrewer) # For color palettes
library(waffle)       # For creating waffle charts
library(treemapify)   # For creating treemaps
library(sf)           # For handling spatial data
library(maptiles)     # For fetching map tiles
library(tidyterra)    # Tidy methods for terra objects (spatial rasters)
library(ggpubr)       # For enhancing ggplot2 publications
# Set working directory. This should be adjusted based on the user's file structure.
setwd("C:/Users/steli/Stelios/Data Science AUEB/Course Material/Trimester 3/Data Visualization/Project 2/FranceRoadAccidents/Data")
# --- France Road Accidents Dashboard (2009–2012) ---
# --- Setup ---
# Load necessary libraries for data manipulation, visualization, and animation.
library(tidyverse)    # Core tidyverse packages for data manipulation and visualization
library(lubridate)    # For easy manipulation of date-time objects
library(forcats)      # For handling categorical variables (factors)
library(ggthemes)     # Additional ggplot2 themes
library(ggrepel)      # For non-overlapping text labels in ggplot2
library(ggridges)     # For creating ridgeline plots
library(patchwork)    # For combining multiple ggplot2 plots
library(hrbrthemes)   # Another set of ggplot2 themes
library(RColorBrewer) # For color palettes
library(waffle)       # For creating waffle charts
library(treemapify)   # For creating treemaps
library(sf)           # For handling spatial data
library(maptiles)     # For fetching map tiles
library(tidyterra)    # Tidy methods for terra objects (spatial rasters)
library(ggpubr)       # For enhancing ggplot2 publications
# Set working directory. This should be adjusted based on the user's file structure.
setwd("C:/Users/steli/Stelios/Data Science AUEB/Course Material/Trimester 3/Data Visualization/Project 2")
# --- Define Global Design Theme ---
# A consistent theme for all static plots to ensure professional aesthetics.
design_theme <- function() {
theme_minimal(base_family = "Helvetica") + # Use a clean, sans-serif font
theme(
text = element_text(color = "#1d1d1f"), # Dark grey text for readability
plot.title = element_text(size = 28, face = "bold", hjust = 0, margin = margin(b = 24)), # Large, bold title, left-aligned
plot.subtitle = element_text(size = 20, hjust = 0, color = "#86868b", margin = margin(b = 18)), # Subtitle in lighter grey
axis.title = element_text(size = 18, face = "bold"), # Bold axis titles
axis.text = element_text(size = 15), # Larger axis text
axis.text.x = element_text(hjust = 1, vjust = 1), # Adjust x-axis text position
panel.grid.major = element_line(color = "#f5f5f7"), # Light grey major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines for cleaner look
legend.title = element_text(size = 16, face = "bold"), # Bold legend title
legend.text = element_text(size = 14), # Larger legend text
legend.position = "bottom", # Place legend at the bottom
plot.background = element_rect(fill = "white", color = NA), # White plot background
panel.background = element_rect(fill = "white", color = NA), # White panel background
strip.text = element_text(size = 16, face = "bold") # Facet strip text styling
)
}
# --- Define Custom Color Palettes ---
# A comprehensive set of pastel-like colors for consistent visualization.
colors <- c(
"#6FAFEF",  # Refined pastel blue
"#EF5E5E",  # Pastel but serious red
"#6ED6A2",  # Mint green with clarity
"#FFD966",  # Warm yellow, still pastel
"#CBA8EB",  # Softer orchid purple
"#B7E3BC",  # Gentle teal
"#FFB266",  # Balanced tangerine
"#FF99AA",  # Gentle pink-red
"#89CFF0",  # Clear pastel aqua
"#7ED6A4",  # Leafy pastel lime
"#A0AFFF",  # Consistent soft indigo
"#F98DA0",  # Slightly deeper rosé
"#CBB690",  # Neutral sand pastel
"#BCA6E0",  # Calm lavender violet
"#70AFFF",  # Cooler azure pastel
"#F6B6C8",  # Refined blush pink
"#A5E5DA",  # Soft mint foam
"#FFE48D",  # Gold pastel with purpose
"#C891EA",  # Pastel plum
"#8FAFCF",  # Muted navy pastel
"#CACACE",  # Gentle pastel gray
"#FFBE91",  # Pastel peach
"#B0E5FF",  # Sky bluebell pastel
"#E5CCF5",  # Light lilac
"#FFF3B8"   # Buttery pastel cream
)
# Specific colors for injury severity levels for easy identification.
injury_colors <- c(
"Killed" = colors[2],             # Red for "Killed"
"Hospitalized Injury" = colors[7], # Tangerine for "Hospitalized Injury"
"Minor Injury" = colors[4],       # Yellow for "Minor Injury"
"Unharmed" = colors[3]            # Mint green for "Unharmed"
)
# --- Plot Save Function ---
# Directory for saving plots; created if it doesn't exist.
output_dir <- "C:/Users/steli/Stelios/Data Science AUEB/Course Material/Trimester 3/Data Visualization/Project 2/FranceRoadAccidents/plots"
dir.create(output_dir, showWarnings = FALSE)
save_plot <- function(plot, filename, width = 14, height = 8, units = "in", subtitle = "",
remove_x_labels = FALSE, remove_y_labels = FALSE) {
source_caption <- "Source: French National Road Accidents Database (BAAC), data.gouv.fr, 2005–2023"
# Build dynamic theme with optional axis label removal
theme_mod <- theme(
plot.caption = element_text(size = 12, color = "#a1a1a6", hjust = 1, margin = margin(t = 12)),
plot.title = element_text(size = 24, face = "bold", hjust = 0),
plot.subtitle = element_text(size = 18, hjust = 0, color = "#86868b"),
axis.title = element_text(size = 18, face = "bold"),
axis.text.x = if (remove_x_labels) element_blank() else element_text(size = 14, hjust = 0.5),
axis.text.y = if (remove_y_labels) element_blank() else element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16, face = "bold")
)
# Apply design theme and custom labels
plot <- plot +
design_theme() +
labs(subtitle = subtitle, caption = source_caption) +
theme_mod
# Auto-format axes if numeric
built_plot <- ggplot_build(plot)
if (inherits(built_plot$layout$panel_scales_x[[1]]$range, "numeric")) {
plot <- plot + scale_x_continuous(labels = scales::label_number(accuracy = 1, big.mark = ","))
}
if (inherits(built_plot$layout$panel_scales_y[[1]]$range, "numeric")) {
plot <- plot + scale_y_continuous(labels = scales::label_number(accuracy = 1, big.mark = ","))
}
# Save final plot
ggsave(
filename = file.path(output_dir, filename),
plot = plot,
width = width,
height = height,
units = units,
dpi = 300,
limitsize = FALSE
)
}
# --- Load and Prepare Data ---
# Load the main dataset and perform initial data cleaning and feature engineering.
df <- read_csv("/Data/road_accidents_2009_2012_merged.csv") %>%
mutate(
Date = as.Date(Date, format = "%m/%d/%Y"), # Convert Date to Date object
DayOfWeek = factor(weekdays(Date), levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")), # Extract Day of Week as ordered factor
Hour = as.numeric(substr(sprintf("%04d", Hour), 1, 2)), # Extract hour from time, format as two digits
Month = month(Date, label = TRUE), # Extract Month as labeled factor
Year = year(Date), # Extract Year
Age = Year - `Birth Year`, # Calculate Age
lat = as.numeric(lat) / 1e5, # Convert latitude to correct numeric format
long = as.numeric(long) / 1e5, # Convert longitude to correct numeric format
holiday = factor(holiday) # Convert holiday to factor
) %>%
# Clean character columns by removing non-ASCII characters.
mutate(
across(where(is.character), ~ gsub(".?[^\x20-\x7E].?", " ", .))
) %>%
# Recode injury severity levels for consistency.
mutate(
`Injury Severity` = recode(`Injury Severity`,
"Minor injury" = "Minor Injury",
"Hospitalized injury" = "Hospitalized Injury"
)
)
# --- Load and Prepare Data ---
# Load the main dataset and perform initial data cleaning and feature engineering.
df <- read_csv("~/Data/road_accidents_2009_2012_merged.csv") %>%
mutate(
Date = as.Date(Date, format = "%m/%d/%Y"), # Convert Date to Date object
DayOfWeek = factor(weekdays(Date), levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")), # Extract Day of Week as ordered factor
Hour = as.numeric(substr(sprintf("%04d", Hour), 1, 2)), # Extract hour from time, format as two digits
Month = month(Date, label = TRUE), # Extract Month as labeled factor
Year = year(Date), # Extract Year
Age = Year - `Birth Year`, # Calculate Age
lat = as.numeric(lat) / 1e5, # Convert latitude to correct numeric format
long = as.numeric(long) / 1e5, # Convert longitude to correct numeric format
holiday = factor(holiday) # Convert holiday to factor
) %>%
# Clean character columns by removing non-ASCII characters.
mutate(
across(where(is.character), ~ gsub(".?[^\x20-\x7E].?", " ", .))
) %>%
# Recode injury severity levels for consistency.
mutate(
`Injury Severity` = recode(`Injury Severity`,
"Minor injury" = "Minor Injury",
"Hospitalized injury" = "Hospitalized Injury"
)
)
# 23. Vehicles Involved
# Bar chart showing the counts of different vehicle types involved in accidents.
save_plot(
df %>%
distinct(`Vehicle Category`) %>%
mutate(`Vehicle Category` = replace_na(`Vehicle Category`, "Missing")) %>%
count(`Vehicle Category`) %>%
arrange(n) %>%
mutate(`Vehicle Category` = factor(`Vehicle Category`, levels = `Vehicle Category`)) %>%
ggplot(aes(x = n, y = `Vehicle Category`)) +
geom_col(fill = colors[1]) +
geom_text(aes(label = scales::comma(n)), hjust = -0.08, color = "gray30", size = 3.5) +
labs(title = "Vehicles Involved", x = "", y = ""),
"23_behavior_vehicle.jpg",
subtitle = "Types of vehicles involved in incidents",
remove_x_labels = TRUE
)
# --- Load and Prepare Data ---
# Load the main dataset and perform initial data cleaning and feature engineering.
df <- read_csv("~/Data/road_accidents_2009_2012_merged.csv") %>%
mutate(
Date = as.Date(Date, format = "%m/%d/%Y"), # Convert Date to Date object
DayOfWeek = factor(weekdays(Date), levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")), # Extract Day of Week as ordered factor
Hour = as.numeric(substr(sprintf("%04d", Hour), 1, 2)), # Extract hour from time, format as two digits
Month = month(Date, label = TRUE), # Extract Month as labeled factor
Year = year(Date), # Extract Year
Age = Year - `Birth Year`, # Calculate Age
lat = as.numeric(lat) / 1e5, # Convert latitude to correct numeric format
long = as.numeric(long) / 1e5, # Convert longitude to correct numeric format
holiday = factor(holiday) # Convert holiday to factor
) %>%
# Clean character columns by removing non-ASCII characters.
mutate(
across(where(is.character), ~ gsub(".?[^\x20-\x7E].?", " ", .))
) %>%
# Recode injury severity levels for consistency.
mutate(
`Injury Severity` = recode(`Injury Severity`,
"Minor injury" = "Minor Injury",
"Hospitalized injury" = "Hospitalized Injury"
)
)
# --- Load and Prepare Data ---
# Load the main dataset and perform initial data cleaning and feature engineering.
df <- read_csv("~/Data/road_accidents_2009_2012_merged.csv") %>%
mutate(
Date = as.Date(Date, format = "%m/%d/%Y"), # Convert Date to Date object
DayOfWeek = factor(weekdays(Date), levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")), # Extract Day of Week as ordered factor
Hour = as.numeric(substr(sprintf("%04d", Hour), 1, 2)), # Extract hour from time, format as two digits
Month = month(Date, label = TRUE), # Extract Month as labeled factor
Year = year(Date), # Extract Year
Age = Year - `Birth Year`, # Calculate Age
lat = as.numeric(lat) / 1e5, # Convert latitude to correct numeric format
long = as.numeric(long) / 1e5, # Convert longitude to correct numeric format
holiday = factor(holiday) # Convert holiday to factor
) %>%
# Clean character columns by removing non-ASCII characters.
mutate(
across(where(is.character), ~ gsub(".?[^\x20-\x7E].?", " ", .))
) %>%
# Recode injury severity levels for consistency.
mutate(
`Injury Severity` = recode(`Injury Severity`,
"Minor injury" = "Minor Injury",
"Hospitalized injury" = "Hospitalized Injury"
)
)
# --- Load and Prepare Data ---
# Load the main dataset and perform initial data cleaning and feature engineering.
df <- read_csv("C:/Users/steli/Stelios/Data Science AUEB/Course Material/Trimester 3/Data Visualization/Project 2/Data/road_accidents_2009_2012_merged.csv") %>%
mutate(
Date = as.Date(Date, format = "%m/%d/%Y"), # Convert Date to Date object
DayOfWeek = factor(weekdays(Date), levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")), # Extract Day of Week as ordered factor
Hour = as.numeric(substr(sprintf("%04d", Hour), 1, 2)), # Extract hour from time, format as two digits
Month = month(Date, label = TRUE), # Extract Month as labeled factor
Year = year(Date), # Extract Year
Age = Year - `Birth Year`, # Calculate Age
lat = as.numeric(lat) / 1e5, # Convert latitude to correct numeric format
long = as.numeric(long) / 1e5, # Convert longitude to correct numeric format
holiday = factor(holiday) # Convert holiday to factor
) %>%
# Clean character columns by removing non-ASCII characters.
mutate(
across(where(is.character), ~ gsub(".?[^\x20-\x7E].?", " ", .))
) %>%
# Recode injury severity levels for consistency.
mutate(
`Injury Severity` = recode(`Injury Severity`,
"Minor injury" = "Minor Injury",
"Hospitalized injury" = "Hospitalized Injury"
)
)
# 23. Vehicles Involved
# Bar chart showing the counts of different vehicle types involved in accidents.
save_plot(
df %>%
distinct(`Vehicle Category`) %>%
mutate(`Vehicle Category` = replace_na(`Vehicle Category`, "Missing")) %>%
count(`Vehicle Category`) %>%
arrange(n) %>%
mutate(`Vehicle Category` = factor(`Vehicle Category`, levels = `Vehicle Category`)) %>%
ggplot(aes(x = n, y = `Vehicle Category`)) +
geom_col(fill = colors[1]) +
geom_text(aes(label = scales::comma(n)), hjust = -0.08, color = "gray30", size = 3.5) +
labs(title = "Vehicles Involved", x = "", y = ""),
"23_behavior_vehicle.jpg",
subtitle = "Types of vehicles involved in incidents",
remove_x_labels = TRUE
)
