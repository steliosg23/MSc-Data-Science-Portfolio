labs(title = "Top Countries: Score Distributions", x = "Score", y = "Country") +
theme_minimal(base_family = "Helvetica Neue") +
theme(legend.position = "top", plot.title = element_text(size = 16, face = "bold"))
# 8️⃣ Correlogram
cor_matrix <- cor(data %>% select(MATH, READ, SCIE, GLCM), use = "complete.obs")
p8 <- ggcorrplot(cor_matrix, lab = TRUE, type = "lower",
colors = c("#007AFF", "white", "#FF3B30"),
title = "Correlation Matrix: MATH, READ, SCIE, GLCM") +
theme_minimal(base_family = "Helvetica Neue") +
theme(plot.title = element_text(size = 16, face = "bold"))
# 9️⃣ World map
world <- ne_countries(scale = "medium", returnclass = "sf")
world_scores <- world %>%
left_join(avg_country, by = c("name" = "Country"))
p9 <- ggplot(world_scores) +
geom_sf(aes(fill = MeanScore), color = "white", size = 0.1) +
scale_fill_viridis_c(option = "C", na.value = "lightgrey") +
labs(title = "Global Average PISA Scores", fill = "Mean Score") +
theme_minimal(base_family = "Helvetica Neue") +
theme(plot.title = element_text(size = 16, face = "bold"))
# 10️⃣ Scatterplot: MATH vs SCIE
p10 <- ggplot(data, aes(x = MATH, y = SCIE, color = Gender)) +
geom_point(alpha = 0.5) + geom_smooth(method = "lm", se = FALSE) +
labs(title = "Relationship: Math vs Science", x = "Math Score", y = "Science Score") +
scale_color_manual(values = c("#007AFF", "#FF375F")) +
theme_minimal(base_family = "Helvetica Neue") +
theme(plot.title = element_text(size = 16, face = "bold"))
# 11️⃣ Trellis by gender
p11 <- xyplot(Score ~ Subject | Gender, data = data_long,
layout = c(2, 1),
type = c("p", "smooth"),
auto.key = TRUE,
main = "Score Distributions by Gender (Trellis)",
par.settings = simpleTheme(col = c("#007AFF", "#FF375F")))
# 12️⃣ Ridgeline by subject
p12 <- ggplot(data_long, aes(x = Score, y = Subject, fill = Subject)) +
geom_density_ridges(alpha = 0.6) +
scale_fill_viridis_d() +
labs(title = "Score Distributions by Subject", x = "Score", y = "Subject") +
theme_minimal(base_family = "Helvetica Neue") +
theme(legend.position = "none", plot.title = element_text(size = 16, face = "bold"))
# 13️⃣ Boxplot by country (Top 20)
top20 <- avg_country %>% arrange(desc(MeanScore)) %>% slice(1:20) %>% pull(Country)
p13 <- data_long %>%
filter(Country %in% top20) %>%
ggplot(aes(x = Country, y = Score, fill = Subject)) +
geom_boxplot() + coord_flip() +
scale_fill_viridis_d() +
labs(title = "Scores by Country (Top 20)", x = "Country", y = "Score") +
theme_minimal(base_family = "Helvetica Neue") +
theme(plot.title = element_text(size = 16, face = "bold"))
# 14️⃣ Scatter: Education Expenditure vs Mean Score
p14 <- ggplot(avg_country, aes(x = Edu_Expenditure_GDP, y = MeanScore)) +
geom_point(alpha = 0.7, color = "darkblue") +
geom_smooth(method = "lm", se = FALSE, color = "orange", linetype = "dashed") +
labs(title = "Education Expenditure vs Mean Score", x = "Education Expenditure (%GDP)", y = "Mean Score") +
theme_minimal(base_family = "Helvetica Neue") +
theme(plot.title = element_text(size = 16, face = "bold"))
# 15️⃣ Overall subject-wise means
mean_subject <- data_long %>%
group_by(Subject) %>%
summarise(Mean = mean(Score))
p15 <- ggplot(mean_subject, aes(x = Subject, y = Mean, fill = Subject)) +
geom_col(width = 0.6) +
scale_fill_viridis_d() +
labs(title = "Overall Mean Scores by Subject", x = "Subject", y = "Mean Score") +
theme_minimal(base_family = "Helvetica Neue") +
theme(legend.position = "none", plot.title = element_text(size = 16, face = "bold"))
# Save plots
if (!dir.exists("plots_jpg")) dir.create("plots_jpg")
plots <- list(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p12, p13, p14, p15)
for (i in 1:length(plots)) {
ggsave(paste0("plots_jpg/plot", i, ".jpg"), plots[[i]], width = 10, height = 6, dpi = 300)
}
rlang::last_trace()
rlang::last_trace(drop = FALSE)
# --- Source Caption for Animations ---
source_caption <- "Source: French National Road Accidents Database (BAAC), data.gouv.fr, 2005–2023"
# --- Theme for High-Definition Animation ---
design_theme <- function() {
theme_minimal(base_family = "Helvetica") +
theme(
text = element_text(color = "#1d1d1f"),
plot.title = element_text(size = 24, face = "bold", hjust = 0, margin = margin(b = 12)),
plot.subtitle = element_text(size = 18, hjust = 0, color = "#86868b", margin = margin(b = 10)),
plot.caption = element_text(size = 12, hjust = 1, color = "#a1a1a6", margin = margin(t = 12)),
axis.title = element_text(size = 18, face = "bold"),
axis.text = element_text(size = 14),
axis.text.x = element_text(hjust = 1),
panel.grid.major = element_line(color = "#f5f5f7"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA),
strip.text = element_text(size = 14, face = "bold"),
legend.position = "bottom",
legend.title = element_text(size = 16, face = "bold"),
legend.text = element_text(size = 14)
)
}
# --- France Road Accidents Dashboard (2009–2012) ---
# --- Setup ---
# Load necessary libraries for data manipulation, visualization, and animation.
library(tidyverse)    # Core tidyverse packages for data manipulation and visualization
library(lubridate)    # For easy manipulation of date-time objects
library(forcats)      # For handling categorical variables (factors)
library(ggthemes)     # Additional ggplot2 themes
library(ggrepel)      # For non-overlapping text labels in ggplot2
library(ggridges)     # For creating ridgeline plots
library(patchwork)    # For combining multiple ggplot2 plots
library(hrbrthemes)   # Another set of ggplot2 themes
library(RColorBrewer) # For color palettes
library(waffle)       # For creating waffle charts
library(treemapify)   # For creating treemaps
library(sf)           # For handling spatial data
library(maptiles)     # For fetching map tiles
library(tidyterra)    # Tidy methods for terra objects (spatial rasters)
library(ggpubr)       # For enhancing ggplot2 publications
# Set working directory. This should be adjusted based on the user's file structure.
setwd("C:/Users/steli/Stelios/DS AUEB/Trimester 3/Data Visualization/Project 2/FranceRoadAccidents/Data")
# --- France Road Accidents Dashboard (2009–2012) ---
# --- Setup ---
# Load necessary libraries for data manipulation, visualization, and animation.
library(tidyverse)    # Core tidyverse packages for data manipulation and visualization
library(lubridate)    # For easy manipulation of date-time objects
library(forcats)      # For handling categorical variables (factors)
library(ggthemes)     # Additional ggplot2 themes
library(ggrepel)      # For non-overlapping text labels in ggplot2
library(ggridges)     # For creating ridgeline plots
library(patchwork)    # For combining multiple ggplot2 plots
library(hrbrthemes)   # Another set of ggplot2 themes
library(RColorBrewer) # For color palettes
library(waffle)       # For creating waffle charts
library(treemapify)   # For creating treemaps
library(sf)           # For handling spatial data
library(maptiles)     # For fetching map tiles
library(tidyterra)    # Tidy methods for terra objects (spatial rasters)
library(ggpubr)       # For enhancing ggplot2 publications
# Set working directory. This should be adjusted based on the user's file structure.
setwd("C:/Users/steli/Stelios/DS AUEB/Trimester 3/Data Visualization/Project 2/FranceRoadAccidents/Data")
# --- France Road Accidents Dashboard (2009–2012) ---
# --- Setup ---
# Load necessary libraries for data manipulation, visualization, and animation.
library(tidyverse)    # Core tidyverse packages for data manipulation and visualization
library(lubridate)    # For easy manipulation of date-time objects
library(forcats)      # For handling categorical variables (factors)
library(ggthemes)     # Additional ggplot2 themes
library(ggrepel)      # For non-overlapping text labels in ggplot2
library(ggridges)     # For creating ridgeline plots
library(patchwork)    # For combining multiple ggplot2 plots
library(hrbrthemes)   # Another set of ggplot2 themes
library(RColorBrewer) # For color palettes
library(waffle)       # For creating waffle charts
library(treemapify)   # For creating treemaps
library(sf)           # For handling spatial data
library(maptiles)     # For fetching map tiles
library(tidyterra)    # Tidy methods for terra objects (spatial rasters)
library(ggpubr)       # For enhancing ggplot2 publications
# Set working directory. This should be adjusted based on the user's file structure.
setwd("C:/Users/steli/Stelios/DS AUEB/Trimester 3/Data Visualization/Project 2/FranceRoadAccidents/Data")
# --- France Road Accidents Dashboard (2009–2012) ---
# --- Setup ---
# Load necessary libraries for data manipulation, visualization, and animation.
library(tidyverse)    # Core tidyverse packages for data manipulation and visualization
library(lubridate)    # For easy manipulation of date-time objects
library(forcats)      # For handling categorical variables (factors)
library(ggthemes)     # Additional ggplot2 themes
library(ggrepel)      # For non-overlapping text labels in ggplot2
library(ggridges)     # For creating ridgeline plots
library(patchwork)    # For combining multiple ggplot2 plots
library(hrbrthemes)   # Another set of ggplot2 themes
library(RColorBrewer) # For color palettes
library(waffle)       # For creating waffle charts
library(treemapify)   # For creating treemaps
library(sf)           # For handling spatial data
library(maptiles)     # For fetching map tiles
library(tidyterra)    # Tidy methods for terra objects (spatial rasters)
library(ggpubr)       # For enhancing ggplot2 publications
# Set working directory. This should be adjusted based on the user's file structure.
setwd("C:/Users/steli/Stelios/Data Science AUEB/Course Material/Trimester 3/Data Visualization/Project 2/FranceRoadAccidents/Data")
# --- Define Global Design Theme ---
# A consistent theme for all static plots to ensure professional aesthetics.
design_theme <- function() {
theme_minimal(base_family = "Helvetica") + # Use a clean, sans-serif font
theme(
text = element_text(color = "#1d1d1f"), # Dark grey text for readability
plot.title = element_text(size = 28, face = "bold", hjust = 0, margin = margin(b = 24)), # Large, bold title, left-aligned
plot.subtitle = element_text(size = 20, hjust = 0, color = "#86868b", margin = margin(b = 18)), # Subtitle in lighter grey
axis.title = element_text(size = 18, face = "bold"), # Bold axis titles
axis.text = element_text(size = 15), # Larger axis text
axis.text.x = element_text(hjust = 1, vjust = 1), # Adjust x-axis text position
panel.grid.major = element_line(color = "#f5f5f7"), # Light grey major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines for cleaner look
legend.title = element_text(size = 16, face = "bold"), # Bold legend title
legend.text = element_text(size = 14), # Larger legend text
legend.position = "bottom", # Place legend at the bottom
plot.background = element_rect(fill = "white", color = NA), # White plot background
panel.background = element_rect(fill = "white", color = NA), # White panel background
strip.text = element_text(size = 16, face = "bold") # Facet strip text styling
)
}
# --- Define Custom Color Palettes ---
# A comprehensive set of pastel-like colors for consistent visualization.
colors <- c(
"#6FAFEF",  # Refined pastel blue
"#EF5E5E",  # Pastel but serious red
"#6ED6A2",  # Mint green with clarity
"#FFD966",  # Warm yellow, still pastel
"#CBA8EB",  # Softer orchid purple
"#B7E3BC",  # Gentle teal
"#FFB266",  # Balanced tangerine
"#FF99AA",  # Gentle pink-red
"#89CFF0",  # Clear pastel aqua
"#7ED6A4",  # Leafy pastel lime
"#A0AFFF",  # Consistent soft indigo
"#F98DA0",  # Slightly deeper rosé
"#CBB690",  # Neutral sand pastel
"#BCA6E0",  # Calm lavender violet
"#70AFFF",  # Cooler azure pastel
"#F6B6C8",  # Refined blush pink
"#A5E5DA",  # Soft mint foam
"#FFE48D",  # Gold pastel with purpose
"#C891EA",  # Pastel plum
"#8FAFCF",  # Muted navy pastel
"#CACACE",  # Gentle pastel gray
"#FFBE91",  # Pastel peach
"#B0E5FF",  # Sky bluebell pastel
"#E5CCF5",  # Light lilac
"#FFF3B8"   # Buttery pastel cream
)
# Specific colors for injury severity levels for easy identification.
injury_colors <- c(
"Killed" = colors[2],             # Red for "Killed"
"Hospitalized Injury" = colors[7], # Tangerine for "Hospitalized Injury"
"Minor Injury" = colors[4],       # Yellow for "Minor Injury"
"Unharmed" = colors[3]            # Mint green for "Unharmed"
)
# --- Plot Save Function ---
# Directory for saving plots; created if it doesn't exist.
output_dir <- "C:/Users/steli/Stelios/Data Science AUEB/Course Material/Trimester 3/Data Visualization/Project 2/FranceRoadAccidents/plots"
dir.create(output_dir, showWarnings = FALSE)
save_plot <- function(plot, filename, width = 14, height = 8, units = "in", subtitle = "",
remove_x_labels = FALSE, remove_y_labels = FALSE) {
source_caption <- "Source: French National Road Accidents Database (BAAC), data.gouv.fr, 2005–2023"
# Build dynamic theme with optional axis label removal
theme_mod <- theme(
plot.caption = element_text(size = 12, color = "#a1a1a6", hjust = 1, margin = margin(t = 12)),
plot.title = element_text(size = 24, face = "bold", hjust = 0),
plot.subtitle = element_text(size = 18, hjust = 0, color = "#86868b"),
axis.title = element_text(size = 18, face = "bold"),
axis.text.x = if (remove_x_labels) element_blank() else element_text(size = 14, hjust = 0.5),
axis.text.y = if (remove_y_labels) element_blank() else element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16, face = "bold")
)
# Apply design theme and custom labels
plot <- plot +
design_theme() +
labs(subtitle = subtitle, caption = source_caption) +
theme_mod
# Auto-format axes if numeric
built_plot <- ggplot_build(plot)
if (inherits(built_plot$layout$panel_scales_x[[1]]$range, "numeric")) {
plot <- plot + scale_x_continuous(labels = scales::label_number(accuracy = 1, big.mark = ","))
}
if (inherits(built_plot$layout$panel_scales_y[[1]]$range, "numeric")) {
plot <- plot + scale_y_continuous(labels = scales::label_number(accuracy = 1, big.mark = ","))
}
# Save final plot
ggsave(
filename = file.path(output_dir, filename),
plot = plot,
width = width,
height = height,
units = units,
dpi = 300,
limitsize = FALSE
)
}
# --- Load and Prepare Data ---
# Load the main dataset and perform initial data cleaning and feature engineering.
df <- read_csv("road_accidents_2009_2012_merged.csv") %>%
mutate(
Date = as.Date(Date, format = "%m/%d/%Y"), # Convert Date to Date object
DayOfWeek = factor(weekdays(Date), levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")), # Extract Day of Week as ordered factor
Hour = as.numeric(substr(sprintf("%04d", Hour), 1, 2)), # Extract hour from time, format as two digits
Month = month(Date, label = TRUE), # Extract Month as labeled factor
Year = year(Date), # Extract Year
Age = Year - `Birth Year`, # Calculate Age
lat = as.numeric(lat) / 1e5, # Convert latitude to correct numeric format
long = as.numeric(long) / 1e5, # Convert longitude to correct numeric format
holiday = factor(holiday) # Convert holiday to factor
) %>%
# Clean character columns by removing non-ASCII characters.
mutate(
across(where(is.character), ~ gsub(".?[^\x20-\x7E].?", " ", .))
) %>%
# Recode injury severity levels for consistency.
mutate(
`Injury Severity` = recode(`Injury Severity`,
"Minor injury" = "Minor Injury",
"Hospitalized injury" = "Hospitalized Injury"
)
)
library(ggplot2)
library(dplyr)
library(gganimate)
library(sf)
library(lubridate)
library(ggspatial)
library(ggspatial)
library(terra)
# --- Prepare Data ---
plot20_data <- df %>%
distinct(Accident_ID, lat, long, Location, Date) %>%
filter(!is.na(lat), !is.na(long), between(lat, 41, 52), between(long, -5, 10)) %>%
mutate(MonthYear = floor_date(Date, "month")) %>%
arrange(MonthYear) %>%
mutate(MonthYear = factor(MonthYear, levels = unique(MonthYear)))  # ensure chronological order
# Convert to sf (EPSG:4326), then reproject to metric CRS (EPSG:2154)
plot20_sf <- st_as_sf(plot20_data, coords = c("long", "lat"), crs = 4326) %>%
st_transform(2154)  # Lambert-93, meters
# Extract projected coordinates (in meters)
coords_projected <- st_coordinates(plot20_sf)
plot20_data_proj <- plot20_data %>%
mutate(X = coords_projected[, 1], Y = coords_projected[, 2])
# Download basemap using original lat/long (EPSG:4326)
france_map_tiles <- get_tiles(st_bbox(plot20_sf), provider = "CartoDB.Positron", zoom = 7)
# --- Create Animated Plot ---
density_anim <- ggplot(plot20_data_proj, aes(x = X, y = Y)) +
geom_spatraster_rgb(data = france_map_tiles) +  # still in EPSG:4326 (optional for context)
stat_density_2d(
aes(fill = after_stat(level)),
geom = "polygon",
bins = 30,
alpha = 0.6
) +
scale_fill_gradientn(
colors = c("#FF6F61", "#E53935", "#C62828", "#A80000", "#8B0000"),
name = "Accident Density (km²)"
) +
facet_wrap(~ Location) +
labs(
title = "Geographic Distribution of Accidents",
subtitle = "Monthly accident density by location — {format(as.Date(current_frame), '%b %Y')}",
caption = source_caption,
x = "Easting (meters)\n",
y = "\nNorthing (meters)"
) +
design_theme() +
transition_manual(MonthYear) +
ease_aes('cubic-in-out')
# --- Animated Plot Section ---
# --- Animated Plot Section (Adjusted for Unique Accident IDs) ---
# Load required libraries for animations.
library(gganimate) # For creating animations with ggplot2
library(gifski)    # A GIF renderer for gganimate
library(av)        # An alternative video renderer for gganimate
library(stars)       # Required for spatial raster data handling
library(ggspatial)   # Provides geom_stars
# --- Global Animation Settings ---
fps <- 30         # Frames per second for animations
end_pause <- 15   # Duration (in seconds) to pause at the final frame
width <- 14       # Width of the animation output
height <- 8       # Height of the animation output
res <- 300        # Resolution (DPI) for the animation
gif_dir <- "C:/Users/steli/Stelios/Data Science AUEB/Course Material/Trimester 3/Data Visualization/Project 2/FranceRoadAccidents/R Plots/gifs"
dir.create(gif_dir, showWarnings = FALSE) # Create GIF directory if it doesn't exist
# --- Source Caption for Animations ---
source_caption <- "Source: French National Road Accidents Database (BAAC), data.gouv.fr, 2005–2023"
# --- Theme for High-Definition Animation ---
design_theme <- function() {
theme_minimal(base_family = "Helvetica") +
theme(
text = element_text(color = "#1d1d1f"),
plot.title = element_text(size = 24, face = "bold", hjust = 0, margin = margin(b = 12)),
plot.subtitle = element_text(size = 18, hjust = 0, color = "#86868b", margin = margin(b = 10)),
plot.caption = element_text(size = 12, hjust = 1, color = "#a1a1a6", margin = margin(t = 12)),
axis.title = element_text(size = 18, face = "bold"),
axis.text = element_text(size = 14),
axis.text.x = element_text(hjust = 1),
panel.grid.major = element_line(color = "#f5f5f7"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white", color = NA),
panel.background = element_rect(fill = "white", color = NA),
strip.text = element_text(size = 14, face = "bold"),
legend.position = "bottom",
legend.title = element_text(size = 16, face = "bold"),
legend.text = element_text(size = 14)
)
}
library(ggplot2)
library(dplyr)
library(gganimate)
library(sf)
library(lubridate)
library(ggspatial)
library(ggspatial)
library(terra)
# --- Prepare Data ---
plot20_data <- df %>%
distinct(Accident_ID, lat, long, Location, Date) %>%
filter(!is.na(lat), !is.na(long), between(lat, 41, 52), between(long, -5, 10)) %>%
mutate(MonthYear = floor_date(Date, "month")) %>%
arrange(MonthYear) %>%
mutate(MonthYear = factor(MonthYear, levels = unique(MonthYear)))  # ensure chronological order
# Convert to sf (EPSG:4326), then reproject to metric CRS (EPSG:2154)
plot20_sf <- st_as_sf(plot20_data, coords = c("long", "lat"), crs = 4326) %>%
st_transform(2154)  # Lambert-93, meters
# Extract projected coordinates (in meters)
coords_projected <- st_coordinates(plot20_sf)
plot20_data_proj <- plot20_data %>%
mutate(X = coords_projected[, 1], Y = coords_projected[, 2])
# Download basemap using original lat/long (EPSG:4326)
france_map_tiles <- get_tiles(st_bbox(plot20_sf), provider = "CartoDB.Positron", zoom = 7)
# --- Create Animated Plot ---
density_anim <- ggplot(plot20_data_proj, aes(x = X, y = Y)) +
geom_spatraster_rgb(data = france_map_tiles) +  # still in EPSG:4326 (optional for context)
stat_density_2d(
aes(fill = after_stat(level)),
geom = "polygon",
bins = 30,
alpha = 0.6
) +
scale_fill_gradientn(
colors = c("#FF6F61", "#E53935", "#C62828", "#A80000", "#8B0000"),
name = "Accident Density (km²)"
) +
facet_wrap(~ Location) +
labs(
title = "Geographic Distribution of Accidents",
subtitle = "Monthly accident density by location — {format(as.Date(current_frame), '%b %Y')}",
caption = source_caption,
x = "Easting (meters)\n",
y = "\nNorthing (meters)"
) +
design_theme() +
transition_manual(MonthYear) +
ease_aes('cubic-in-out')
# --- Animate and Save ---
fps <- 3
end_pause <- 10
width <- 14
height <- 8
res <- 300
gganimate::animate(
density_anim,
fps = fps,
nframes = length(unique(plot20_data_proj$MonthYear)) + end_pause,
width = width * res,
height = height * res,
res = res,
renderer = gifski_renderer(file.path(gif_dir, "20_geographic_density_monthly.gif"))
)
library(ggplot2)
library(dplyr)
library(gganimate)
library(sf)
library(lubridate)
library(ggspatial)
library(ggspatial)
library(terra)
# --- Prepare Data ---
plot20_data <- df %>%
distinct(Accident_ID, lat, long, Location, Date) %>%
filter(!is.na(lat), !is.na(long), between(lat, 41, 52), between(long, -5, 10)) %>%
mutate(MonthYear = floor_date(Date, "month")) %>%  # keep Date format
arrange(MonthYear) %>%
mutate(MonthYear = factor(MonthYear, levels = unique(MonthYear)))  # ensure correct chronological order
# Convert to sf for spatial base
plot20_sf <- st_as_sf(plot20_data, coords = c("long", "lat"), crs = 4326)
# Download basemap tiles
france_map_tiles <- get_tiles(st_bbox(plot20_sf), provider = "CartoDB.Positron", zoom = 7)
# --- Create Animated Plot ---
density_anim <- ggplot(plot20_data, aes(x = long, y = lat)) +
geom_spatraster_rgb(data = france_map_tiles) +  # Basemap
stat_density_2d(
aes(fill = after_stat(level)),
geom = "polygon",
bins = 30,
alpha = 0.6
) +
scale_fill_gradientn(
colors = c("#FF6F61", "#E53935", "#C62828", "#A80000", "#8B0000"),
name = "Accident Density"
) +
facet_wrap(~ Location) +
labs(
title = "Geographic Distribution of Accidents",
subtitle = "Monthly accident density by location — {format(as.Date(current_frame), '%b %Y')}",
caption = source_caption,
x = "Longitude\n",
y = "\nLatitude"
) +
design_theme() +  # your custom theme
transition_manual(MonthYear) +  # Animate frame by MonthYear
ease_aes('cubic-in-out')
# --- Animate and Save ---
fps <- 3        # Slow enough for clarity
end_pause <- 10  # Hold final frame
width <- 14      # Inches
height <- 8
res <- 300       # DPI
gganimate::animate(
density_anim,
fps = fps,
nframes = length(unique(plot20_data$MonthYear)) + end_pause,
width = width * res,
height = height * res,
res = res,
renderer = gganimate::gifski_renderer(file.path(gif_dir, "20_geographic_density_monthly.gif"))
)
message("All animated plots generated.")
